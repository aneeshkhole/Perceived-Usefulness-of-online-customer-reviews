{
  "hash": "d3eaaa8fb4c8f66e22b74e6a6a1ffee9",
  "result": {
    "engine": "jupyter",
    "markdown": "# Data Collection and Exploration {#sec-data}\n\n\n\n## Data Collection Overview\n\nLeverage python Selenium, urllib, and Beautiful Soup to scrape data from X products.\n\n* Sought to collect some data from 3 websites - target, amazon, and best buy.\n\n* Where possible, collect same entity from multiple sites\n\nAs part of collection, to the greatest extent we are able, we cleaned information *during* the scraping process.  We leveraged tools such as the python regular expression library and (*anything else?*) to pull the exact information we sought while scraping.  The only possible additional cleaning that may be required after scraping is the handling of unicode characters within product names, product reviews, and so forth.\n\nIn terms of simplicity for scraping our data, we will manually identify a list of products.  @percUse leveraged solely 3 products from Amazon.  Our team seeks to scrape between 20 and 30 products and all their reviews from Target, Amazon, and Best Buy.  By doing so, we are greatly increasing the sample size of data compared to the original work performed.\n\n## Data Collection Details\n\nIn collecting our data, in order to adhere to the model implemented by @percUse, we require the following data points, at a minimum:\n\n::: {.cell tbl='tbl-data-reqs-products' execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_d7f00\">\n  <thead>\n    <tr>\n      <th id=\"T_d7f00_level0_col0\" class=\"col_heading level0 col0\" >Variable</th>\n      <th id=\"T_d7f00_level0_col1\" class=\"col_heading level0 col1\" >Data Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d7f00_row0_col0\" class=\"data row0 col0\" >Product Title</td>\n      <td id=\"T_d7f00_row0_col1\" class=\"data row0 col1\" >string</td>\n    </tr>\n    <tr>\n      <td id=\"T_d7f00_row1_col0\" class=\"data row1 col0\" >Product Category*</td>\n      <td id=\"T_d7f00_row1_col1\" class=\"data row1 col1\" >string</td>\n    </tr>\n    <tr>\n      <td id=\"T_d7f00_row2_col0\" class=\"data row2 col0\" >Product Details/Specs</td>\n      <td id=\"T_d7f00_row2_col1\" class=\"data row2 col1\" >string</td>\n    </tr>\n    <tr>\n      <td id=\"T_d7f00_row3_col0\" class=\"data row3 col0\" >Product Cost</td>\n      <td id=\"T_d7f00_row3_col1\" class=\"data row3 col1\" >float</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n::: {.cell tbl='tbl-data-reqs-ratings' execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_05d4d\">\n  <thead>\n    <tr>\n      <th id=\"T_05d4d_level0_col0\" class=\"col_heading level0 col0\" >Variable</th>\n      <th id=\"T_05d4d_level0_col1\" class=\"col_heading level0 col1\" >Data Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_05d4d_row0_col0\" class=\"data row0 col0\" >Verified Purchase</td>\n      <td id=\"T_05d4d_row0_col1\" class=\"data row0 col1\" >boolean</td>\n    </tr>\n    <tr>\n      <td id=\"T_05d4d_row1_col0\" class=\"data row1 col0\" >Star Rating</td>\n      <td id=\"T_05d4d_row1_col1\" class=\"data row1 col1\" >float</td>\n    </tr>\n    <tr>\n      <td id=\"T_05d4d_row2_col0\" class=\"data row2 col0\" >Review Content</td>\n      <td id=\"T_05d4d_row2_col1\" class=\"data row2 col1\" >string</td>\n    </tr>\n    <tr>\n      <td id=\"T_05d4d_row3_col0\" class=\"data row3 col0\" >Useful Votes</td>\n      <td id=\"T_05d4d_row3_col1\" class=\"data row3 col1\" >integer</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nFrom our collected data, here are some of the calculations we'll need to run for building our models.  If time is available, we will run these calculations using Python's NLTK before the completion of this milestone.\n\n::: {.cell tbl='tbl-data-calcs' execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_73df9\">\n  <thead>\n    <tr>\n      <th id=\"T_73df9_level0_col0\" class=\"col_heading level0 col0\" >Variable</th>\n      <th id=\"T_73df9_level0_col1\" class=\"col_heading level0 col1\" >Data Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_73df9_row0_col0\" class=\"data row0 col0\" >Product Subjectivity</td>\n      <td id=\"T_73df9_row0_col1\" class=\"data row0 col1\" >float</td>\n    </tr>\n    <tr>\n      <td id=\"T_73df9_row1_col0\" class=\"data row1 col0\" >Review Length</td>\n      <td id=\"T_73df9_row1_col1\" class=\"data row1 col1\" >integer</td>\n    </tr>\n    <tr>\n      <td id=\"T_73df9_row2_col0\" class=\"data row2 col0\" >Sentiment Score</td>\n      <td id=\"T_73df9_row2_col1\" class=\"data row2 col1\" >float</td>\n    </tr>\n    <tr>\n      <td id=\"T_73df9_row3_col0\" class=\"data row3 col0\" >Reputation Score</td>\n      <td id=\"T_73df9_row3_col1\" class=\"data row3 col1\" >float</td>\n    </tr>\n    <tr>\n      <td id=\"T_73df9_row4_col0\" class=\"data row4 col0\" >Product Type Score</td>\n      <td id=\"T_73df9_row4_col1\" class=\"data row4 col1\" >float</td>\n    </tr>\n    <tr>\n      <td id=\"T_73df9_row5_col0\" class=\"data row5 col0\" >Polarity Score</td>\n      <td id=\"T_73df9_row5_col1\" class=\"data row5 col1\" >float</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nIn terms of structuring our stored data, we will have a central table and child tables.  Since we will seek, in some cases, to gather the *same* product from multiple websites, we must have a structure that identifies:\n\n* The full listing of products, assigned an arbitrary ID\n\n* A listing of specific products we intend to scrape from each of the websites we've identified.  Adding an additional ID of \\[company_name\\]-\\[arbitrary_product_id\\]\n\n* Site-specific product information\n\n* Site-specific review content and metadata\n\nTo wrangle the potential amount of data we may collect, we will partition review files into their own files under the following convention:  \\[company_name\\]-\\[arbitrary_product_id\\]-review_content.csv.  Using this method will allow us to capture thousands of reviews for multiple products without overrunning GitHub filesize limitations.  Following this convention will also allow us to easily script out the integration of all these files for analysis when we begin building and applying our models.\n\nAdditionally, the use of assigning products an arbitrary ID that is common between different vendors will allow us to *directly compare* review and product information across multiple vendors simultaneously to gather additional insights.  Effectively, if we group products by this identifier, we can see how the product performs overall in multiple e-commerce platforms.  Similarly, we can use this information to evaluate and run comparisons and tests on individual products, given the treatment of their offering on different platforms.  This can help generate even more insight before model application.  \n\nFor instance, we may be able to explore questions like:\n\n* Is the price of a product higher, given it's offered on Amazon, BestBuy, or Target?\n\n* Is a product's star rating affected by which e-commerce platform is selling it?\n\n* Is there a substantial difference in number of product reviews on one e-commerce platform vs. another?\n\n* Is one e-commerce platform more likely to have input and feedback on reviews (i.e. higher proportion of \"this review is helpful\" votes to total number of reviews)?\n\n* What is the difference in the level of detail provided in product descriptions (e.g. for the same product) across each e-commerce platform?\n\nStructuring our data properly during the collection process will enable us to explore and answer these questions.\n\n## Collection Procdures?\n\nWe wrote code to allow us to (mostly) template out our gathering of information from each website.  The general process for each page is similar for data gathering.  To alleviate any unnecessary burden on the target websites, we manually identified URLs to the specific products we sought out to gather, and wrote our code to iterate through those URLs and pull the necessary data and features we sought.  This hybrid approach saved us time and effort.\n\n* Gathering from Target (All products)\n\n    * Target has dynamic content on their webpages.  We used Python Selenium to navigate to product pages and automate the selection of items needed to expand sections to reveal additional data.  We also automated the process of expanding out all reviews so as to iterate through and parse the content of every review for each product in question.  We extracted the fields listed above (reference here) to store in our records tables.\n\n* Gathering from Amazon (All Products)\n\n* Gathering from BestBuy (Electronic Products, Furniture Item(s)? - no grocery or clothing)\n\n## Visualizations\n\n* We require a minimum of 10 unique EDA plots for this milestone.  We've outlined some of the below but need our data in order and unified prior to development.\n\n    * Scatter Plots\n\n    * Bar Plots \n\n    * Box Plots\n\n    * Violin Plots (e.g. same product, two different websites)\n\n    * review length\n\n        * vs star rating\n\n        * vs sentiment\n\n    * Product description / detail length\n\n        * Potentially explore \"specificity\" classifier\n\n    * Correlation analyses and linear regressions\n\n    * Heatmaps\n\n    * Tukey test visuals\n\n\n\n* Inter-Website Comparison of Product Reviews\n\n    * Same Product \n\n        * Clustering? \n\n        * Distances?\n\n    * All Products\n\n    * Inspect the following, visually: \n    \n        * Product Ratings\n        \n        * Customer Sentiments **try to score before plotting & turn-in**\n        \n        * Review Polarity **try to score and store before plotting**\n        \n        * Naive Bayes Classifier\n        \n        * Reliability estimates\n\n        * Product description subjectivity scores **try to score and store before turn-in** \n        \n        * Average / Spread of number of ratings per product, **try to score and store before turn-in** \n        \n        * Average/Spread of Useful Votes per Product Review, **try to score and store before turn-in** \n        \n        * Inspection of Data and / or Scoring using Kansei method.\n\n* Will need to take note on if / how these variables conform to some form of statistical distribution (uniform, normal, exponential, etc)\n\n## Data Before / After\n\n* \n\n## Insights from Collection and EDA \n\n* \n\n",
    "supporting": [
      "data_files\\figure-pdf"
    ],
    "filters": []
  }
}