# Models Implemented {#sec-models-implemented}

```{python importsBlock}
import pandas as pd, numpy as np, matplotlib.pyplot as plt
import seaborn as sns
# from sklearn import tree
from sklearn.metrics import (
    accuracy_score,f1_score,
    precision_score,recall_score, 
    confusion_matrix, ConfusionMatrixDisplay,
)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn import svm
from imblearn.over_sampling import ADASYN, SMOTE



```

```{python DataImports}
product_data = pd.read_csv('../data/master_product_list.csv')
review_orig = pd.read_csv('../data/reviews_with_stats.csv')
reviews = pd.read_csv('../data/reviews_outlier_adjusted.csv')
reviews['prodSiteID'] = reviews['prodSiteID'].str.upper()
review_orig['prodSiteID'] = reviews['prodSiteID'].str.upper()
product_data['prodSiteID'] = product_data['prodSiteID'].str.upper()

reviews = reviews.merge(
    right=pd.DataFrame(
      product_data[
        [
            'product_price','prodSiteID',
            'prod_subjectivity','total_star_rating','site'
        ]
      ]
    ),
    on='prodSiteID',
    how='left'
)

review_orig = review_orig.merge(
    right=pd.DataFrame(
      product_data[
        [
            'product_price','prodSiteID',
            'prod_subjectivity','total_star_rating','site'
        ]
      ]
    ),
    on='prodSiteID',
    how='left'
)

reviews['is_helpful'] = np.select(
    [
        reviews['review_helpful_votes'] > 0,
        (reviews['review_helpful_votes'] == 0) | (reviews['review_helpful_votes'].isna()),
    ],
    [
        1,
        0
    ]
)

review_orig['is_helpful'] = np.select(
    [
        review_orig['review_helpful_votes'] > 0,
        (review_orig['review_helpful_votes'] == 0 )| (reviews['review_helpful_votes'].isna()),
    ],
    [
        1,
        0
    ]
)

test_metrics = pd.DataFrame(
    {
        'Model':[],
        'Useful Level':[],
        'Accuracy':[],
        'F1':[],
        'Precision':[],
        'Recall':[]
    }
)

reviews = reviews.dropna()
review_orig = review_orig.dropna()

tmp = pd.DataFrame(
    reviews[reviews['productID'].isin(list(range(1,16)))]
)

train_frame = pd.DataFrame(
    tmp.sample(n=int(.8*len(tmp)))
)

test_frame = pd.DataFrame(
    review_orig.loc[~review_orig.index.isin(train_frame)]
)
```

```{python DataTransforms}
X_train,X_test,y_train,y_test= [
    StandardScaler().fit_transform(np.array(train_frame[[
        'review_star_rating_adjusted', 'review_helpful_votes_adjusted',
        'review_subjectivity_adjusted', 'review_polarity_adjusted',
        'review_length_adjusted','prod_subjectivity','total_star_rating'
    ]])),
    StandardScaler().fit_transform(np.array(test_frame[[
        'review_star_rating', 'review_helpful_votes',
        'review_subjectivity', 'review_polarity',
        'review_length','prod_subjectivity','total_star_rating'
    ]])),
    np.array(train_frame['is_helpful']),
    np.array(test_frame['is_helpful'])
]
```


```{python PCATransforms}
pca = PCA()
pcs = pca.fit_transform(X_train)
pr_df = pd.DataFrame(data=pcs)
pr_df.columns = ["PC{}".format(i) for i in range(1,len(pca.components_)+1)]
exp_var = pca.explained_variance_ratio_
cum_var = np.cumsum(exp_var)
cum_var_df = pd.DataFrame({
    'Principal Component':[f'PC{i+1}' for i in range(len(cum_var))],
    'Cumulative Variance':cum_var,
    'Explained Variance':exp_var
})
cum_var_df
pca = PCA(n_components=6)
w=pca.fit(X_train)
X_train_pca=pca.transform(X_train)
X_test_pca=pca.transform(X_test)
```

In our modeling of the collected data, we seek to investigate several models for the generalization of the work performed by @percUse.

We will examine, compare, and contrast the use of the following models: 

* Multiple Linear Regression Prediction

* Logistic Regression Classification

* K-Nearest Neighbors Classification

* Support Vector Machine Classification

## Data Adjustments

As noted in our exploratory data analysis, each individual site has statistically significant differences in key variables we're considering in our modeling.  To mitigate the potential for under or overfitting, and misrepresentation due to variable scale we perform the following transformations to our data:

<!--NOTE - need information here on specific variables under consideration for our modeling-->

1. Variable outlier adjustment.  We noted in our EDA that each of the e-commerce platforms had high volumes of outliers with respect to the inter-quartile range.  We applied a transformation to our data to map any outlier variable value on a per-website basis from its value to $\mu+3\cdot sd(\text{variable})$ for high-end outliers, and $\mu-3\cdot sd(\text{variable})$ for low-end outliers.  In the event that either of these values exceeded the minimum or maximum value of the dataset, we mapped the value to the minimum or maximum accordingly.

2. Standard scaling of variables.  After adjusting outliers, we re-mapped all of our feature variables to be on the scale from 0 to 1.

3. Response variable transformation to binary value.  We denoted a single useful vote as meaning that the review was useful to customers, and mapped the value to True/1, and False/0 otherwise.

4. Dimensionality Reduction via Principal Component Analysis.  To accelerate training and evaluation by our models, we...

Here is a sample of our data prior to the transformation:

```{python}

```

And here is a sample of our data after the applied transformations:

```{python}

```

### Training Data

To train our dataset, we leveraged the data post-transformation to train each of our models, including the adjustments of outlier datapoints to being within 3 standard deviations of the mean of each variable.  We selected an 80% sample of this data and leveraged the same dataset to train each model.

### Testing Data

For testing, we evaluated each model against transformed data, omitting the transformation of outliers to being within 3 standard deviations of the mean.  We performed this action to enable a fair comparison of each model against one another when working with real-world data.

## Examination of the Original Multiple Linear Regression

$\hat{y} = \beta_0 + \beta_{polarity} + \beta_{} +$

### Violations of Linear Model Assumptions

#### Lack of Linear Correlation

#### Absence of Homoscedasticity on Normalized Data

#### Absence of Normality in Residuals

#### Lack of Confidence in t- and F-test results, $\beta$ inference

#### Conclusion on MLR model

On the above bases, the model fails to meet the required assumptions for a linear regression.  As such, our team rejects the multiple linear regression model as an effective means of predicting the perceived usefulness of review feedback on e-commerce websites for generalization.

## Logistic Regression Classification

With the challenges of meeting and replicating the outcomes from @percUse for a MLR model, we proceeded onward to other options.  Our next choice for examination was logistic regression.  The MLR called for use of only numeric or continuous variables.  Logisitic regression enables us to examine the inclusion of additional categorical variables as part of the regression consideration.

### Hyperparameter Tuning

Logistic regression is one of the best performing models in the project after SVM. There are 3 logistic regression models - one was tuned using the class weight hyperparameter to address the class imbalance present in the dataset. By assigning a higher weight to the minority class (useful level 1) and a lower weight to the majority class (useful level 0), the model was able to better capture the patterns associated with the minority class, leading to improved performance metrics.

### Oversampling techniques

Additionally, 2 more logistic regression models are trained using two oversampling techniques, namely ADASYN and SMOTE. ADASYN, which generates synthetic samples for the minority class based on their difficulty in learning regions, and SMOTE, which creates synthetic samples by interpolating between existing minority class samples, were used to address the class imbalance problem. These techniques help to provide the model with more balanced training data, allowing it to learn the characteristics of both classes more effectively.
 
It is a well know fact that oversampling techniques are employed if there a severe class imbalance if hyperparameter tuning does not improve the model performance. However, despite the heavy class imbalance, the tuned model and the SMOTE model achieve great result with 98% accuracy indicating that it is proficient at making correct predictions. 68% recall is decent but indicates that the model maybe classifying the positive instances from minority class incorrectly. 


<!--try to tweak and tune this model for better performance--> 
### Logistic Regression Test Results
```{python LogRegBlock}

#Logmod hyperparameter

LogMod = LogisticRegression(class_weight={0:.3,1:.7})
LogMod.fit(X_train_pca,y_train)
y_pred = (LogMod.predict_proba(X_test_pca)[:,1]>0.25)

test_metrics.loc[len(test_metrics)] = {
    'Model':'Logistic Regression (TUNED)',
    'Useful Level': "above 0",
    'Accuracy':accuracy_score(y_test,y_pred),
    'F1':f1_score(y_test,y_pred),
    'Precision':precision_score(y_test,y_pred),
    'Recall':recall_score(y_test,y_pred)
}
# ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot()
# display(test_metrics)





#### Logmod ADASYN

adasyn = ADASYN()
X_train_adasyn, y_train_adasyn = adasyn.fit_resample(X_train_pca, y_train)
logmod_adasyn = LogisticRegression()
logmod_adasyn.fit(X_train_adasyn, y_train_adasyn)
y_pred_adasyn = logmod_adasyn.predict(X_test_pca)


test_metrics.loc[len(test_metrics)] = {
    'Model': 'Logistic Regression (ADASYN)',
    'Useful Level': "above 0",
    'Accuracy': accuracy_score(y_test, y_pred_adasyn),
    'F1': f1_score(y_test, y_pred_adasyn),
    'Precision': precision_score(y_test, y_pred_adasyn),
    'Recall': recall_score(y_test, y_pred_adasyn)
}

# ConfusionMatrixDisplay(confusion_matrix(y_test, y_pred_adasyn)).plot()
# display(test_metrics)

X_test_scaled = StandardScaler().fit_transform(X_test)
X_test_pca = pca.transform(X_test_scaled)

#### Logmod SMOTE

smote = SMOTE()
X_train_smote, y_train_smote = smote.fit_resample(X_train_pca, y_train)
logmod_smote = LogisticRegression()
logmod_smote.fit(X_train_smote, y_train_smote)

y_pred_smote = logmod_smote.predict(X_test_pca)

test_metrics.loc[len(test_metrics)] = {
    'Model': 'Logistic Regression (SMOTE)',
    'Useful Level': "above 0",
    'Accuracy': accuracy_score(y_test, y_pred_smote),
    'F1': f1_score(y_test, y_pred_smote),
    'Precision': precision_score(y_test, y_pred_smote),
    'Recall': recall_score(y_test, y_pred_smote)
}


# ConfusionMatrixDisplay(confusion_matrix(y_test, y_pred_smote)).plot()
# display(test_metrics)

test_metrics_df = pd.DataFrame(test_metrics)
display(test_metrics_df)


fig, axes = plt.subplots(1, 3, figsize=(18, 6))

ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot(ax=axes[0])
axes[0].set_title('Tuned Model')

ConfusionMatrixDisplay(confusion_matrix(y_test, y_pred_adasyn)).plot(ax=axes[1])
axes[1].set_title('ADASYN')

ConfusionMatrixDisplay(confusion_matrix(y_test, y_pred_smote)).plot(ax=axes[2])
axes[2].set_title('SMOTE')

plt.tight_layout()
plt.show()

```



## K-Nearest Neighbors Classification

### Hyperparameter Tuning

### KNN Test Results
<!--try to tweak and tune this model for better performance--> 
```{python KnnBlock}
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train_pca,y_train)
y_pred = knn.predict(X_test_pca)
test_metrics.loc[len(test_metrics)] = {
    'Model':'KNN',
    'Useful Level':"above 0",
    'Accuracy':accuracy_score(y_test,y_pred),
    'F1':f1_score(y_test,y_pred),
    'Precision':precision_score(y_test,y_pred),
    'Recall':recall_score(y_test,y_pred)
}
ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot()
display(test_metrics)
```

## Support Vector Machine Classification

### Hyperparameter Tuning

### KNN Test Results

```{python SVMBlock}
spt_vector = svm.SVC(
    kernel='poly',degree=1,probability=True,class_weight={0:0.1,1:0.9}
).fit(X_train_pca,y_train)

y_pred = spt_vector.predict(X_test_pca)
test_metrics.loc[len(test_metrics)] = {
    'Model':'SVM-PCA',
    'Useful Level':"above 0",
    'Accuracy':accuracy_score(y_test,y_pred),
    'F1':f1_score(y_test,y_pred),
    'Precision':precision_score(y_test,y_pred),
    'Recall':recall_score(y_test,y_pred)
}
ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot()
display(test_metrics)
```

## Model Comparison

We examine the following table to compare and contrast our implemented models on our collected data.

```{python FinalResultsTable}
test_metrics
```

Each of these models had similar performance in terms of accuracy and precision. A key consideration for us is within the realm of recall in that false positives are potentially beneficial to the generalization of this model to identify reviews that are useful, but currently possess no helpful votes.  None of the models delivered any false positives, but having high recall may support identification of new, useful comments.

The top 2 performing models were our Support Vector Machine and Logistic Regression implementations.  Between the two, SVM had higher recall, which is preferable in our use case.  That being said, on every metric between the two models, there was near equivalent performance.

SVM was a more challenging implementation, ...